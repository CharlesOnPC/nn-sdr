import pandas as pd
import random
import numpy
import numpy as np

class MLP():

    def __init__(self):
        self.layers = 1
        self.weights = 0
        self.features = 5


# Import ASK2 Test Set Generated by MATLAB
ask2_test_data = pd.read_excel("ask2_test_data.xls",header=None)

# Import ASK4 Test Set Generated by MATLAB
ask4_test_data = pd.read_excel("ask4_test_data.xls",header=None)

# Import FSK2 Test Set Generated by MATLAB
fsk2_test_data = pd.read_excel("fsk2_test_data.xls",header=None)

# Import FSK4 Test Set Generated by MATLAB
fsk4_test_data = pd.read_excel("fsk4_test_data.xls",header=None)

# Import PSK2 Test Set Generated by MATLAB
psk2_test_data = pd.read_excel("psk2_test_data.xls",header=None)

# Import PSK4 Test Set Generated by MATLAB
psk4_test_data = pd.read_excel("psk4_test_data.xls",header=None)

######## ASK2 ########
# Slice the first 200 samples of the test set for ASK2 for training
ask2_test_set = ask2_test_data.iloc[0:199,:]

# Slice the next 100 samples of the test set for ASK2 validation on MLP
ask2_validation_set = ask2_test_data.iloc[200:299,:]

######## ASK4 ########
# Slice the first 200 samples of the test set for ASK4 for training
ask4_test_set = ask4_test_data.iloc[0:199,:]

# Slice the next 100 samples of the test set for ASK4 validation on MLP
ask4_validation_set = ask4_test_data.iloc[200:299,:]

######## FSK2 ########
# Slice the first 200 samples of the test set for FSK2 for training
fsk2_test_set = fsk2_test_data.iloc[0:199,:]

# Slice the next 100 samples of the test set for FSK2 validation on MLP
fsk2_validation_set = fsk2_test_data.iloc[200:299,:]

######## FSK4 ########
# Slice the first 200 samples of the test set for FSK4 for training
fsk4_test_set = fsk4_test_data.iloc[0:199,:]

# Slice the next 100 samples of the test set for ASK4 validation on MLP
fsk4_validation_set = fsk4_test_data.iloc[200:299,:]

######## PSK2 ########
# Slice the first 200 samples of the test set for PSK2 for training
psk2_test_set = psk2_test_data.iloc[0:199,:]

# Slice the next 100 samples of the test set for PSK2 validation on MLP
psk2_validation_set = psk2_test_data.iloc[200:299,:]

######## PSK4 ########
psk4_test_set = psk4_test_data.iloc[0:199,:]

psk4_validation_set = psk4_test_data.iloc[200:299,:]

def relu(x):
    return np.maximum(0,x)

def softmax(x):
    e_x = np.exp(x-np.max(x))
    return e_x / e_x.sum(axis=len(x.shape)-1,keepdims=True)



# Declare number of features #
features = 5

# The MLP wil have one hidden layer with 8 nodes
number_of_nodes = 8

# Declare array for weight matrix of input layer to hidden layer
weight_array_l1  = numpy.zeros((number_of_nodes,features))

# Declare array for weight matrix of hidden layer to output layer
weight_array_l2  = numpy.zeros((number_of_nodes,features))

# Establish array for bias terms for each node in hidden layer
neurons_bias_term  = numpy.zeros((1,8))

output_layer = numpy.zeros((1,5))

# Choose random weight values to start
weight_array_l1 = np.random.randn(number_of_nodes,features)
weight_array_l2 = np.random.randn(number_of_nodes,features)

# Forward Pass starting with first data set
z1 = numpy.dot(ask2_test_set[0,:],weight_array_l1)

# Apply Activation Function
h1 = relu(z1)

z2 = numpy.dot(h1.traspose(),weight_array_l2)

output = softmax(z2)

print(output)

#print(ask2_test_data)